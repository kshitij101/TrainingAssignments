[{"C:\\xampp\\htdocs\\finalproject\\src\\index.js":"1","C:\\xampp\\htdocs\\finalproject\\src\\App.js":"2","C:\\xampp\\htdocs\\finalproject\\src\\reportWebVitals.js":"3","C:\\xampp\\htdocs\\finalproject\\src\\components\\Allreviews.js":"4","C:\\xampp\\htdocs\\finalproject\\src\\redux\\store.js":"5","C:\\xampp\\htdocs\\finalproject\\src\\redux\\saga.js":"6","C:\\xampp\\htdocs\\finalproject\\src\\redux\\reducers\\rootReducer.js":"7","C:\\xampp\\htdocs\\finalproject\\src\\redux\\actions.js":"8","C:\\xampp\\htdocs\\finalproject\\src\\components\\Register.js":"9","C:\\xampp\\htdocs\\finalproject\\src\\components\\Login.js":"10","C:\\xampp\\htdocs\\finalproject\\src\\redux\\history.js":"11","C:\\xampp\\htdocs\\finalproject\\src\\components\\UserHome.js":"12","C:\\xampp\\htdocs\\finalproject\\src\\components\\CreateReview.js":"13","C:\\xampp\\htdocs\\finalproject\\src\\redux\\localStorage.js":"14"},{"size":592,"mtime":1612119196263,"results":"15","hashOfConfig":"16"},{"size":1675,"mtime":1612292197842,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":2544,"mtime":1612291235951,"results":"19","hashOfConfig":"16"},{"size":524,"mtime":1612249226840,"results":"20","hashOfConfig":"16"},{"size":6206,"mtime":1612290591291,"results":"21","hashOfConfig":"16"},{"size":1778,"mtime":1612288494543,"results":"22","hashOfConfig":"16"},{"size":2293,"mtime":1612287856437,"results":"23","hashOfConfig":"16"},{"size":2775,"mtime":1612199485091,"results":"24","hashOfConfig":"16"},{"size":2403,"mtime":1612201808917,"results":"25","hashOfConfig":"16"},{"size":89,"mtime":1612196736606,"results":"26","hashOfConfig":"16"},{"size":4811,"mtime":1612292810518,"results":"27","hashOfConfig":"16"},{"size":2361,"mtime":1612250950611,"results":"28","hashOfConfig":"16"},{"size":557,"mtime":1612291070487,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"15qi9fh",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\xampp\\htdocs\\finalproject\\src\\index.js",[],["64","65"],"C:\\xampp\\htdocs\\finalproject\\src\\App.js",["66"],"C:\\xampp\\htdocs\\finalproject\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\finalproject\\src\\components\\Allreviews.js",["67","68"],"import { getReviews } from '../redux/actions';\r\n// import { removeUpdateReviewCount} from '../redux/actions';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\n\r\nconst Allreviews = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    // const url = \"http://localhost:4200\";\r\n\r\n    // const [users,setUserId] = useState([]);\r\n    // const [reviews,setRev] = useState([]);\r\n\r\n    // useEffect(() =>{\r\n    //     axios.get(url+\"/api/users\")\r\n    //         .then(res =>{\r\n    //             let allUsers = [];\r\n    //             res.data.response.map((user=>(\r\n    //                 allUsers[user.id] = [user.username]\r\n    //             )))\r\n    //             // console.log(allUsers);\r\n    //             setUserId(allUsers);\r\n    //         })\r\n    //         .catch(error => {\r\n    //             console.log(error);\r\n    //         });\r\n    //     axios.get(url+\"/api/reviews\")\r\n    //         .then(res=>{\r\n    //             setRev(res.data.response);\r\n    //         })\r\n    //         .catch(error =>{\r\n    //             console.log(error);\r\n    //         });\r\n        \r\n    // },[])\r\n\r\n    useEffect(() =>{\r\n        dispatch(getReviews());\r\n    },[dispatch]);\r\n\r\n    let reviews = useSelector((state) => state.reviews);\r\n    console.log(reviews);\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"card-deck\">\r\n                <div className=\"row\" >   \r\n                {\r\n                    reviews && reviews.map((movie=>(\r\n                        <div className=\"col-md-4 d-flex align-items-stretch\">\r\n                            <div key={movie.id} className=\"card \">\r\n                                <img className=\"card-img-top\" src={movie.movie_img}></img>\r\n                                <div className=\"card-body\">\r\n                                    <h5 className=\"card-title\">{movie.moviename}</h5>\r\n                                    <p className=\"card-text\">{movie.review}</p>\r\n                                    <p className=\"card-text\"><small className=\"text-mutes\">Genre: {movie.genre}</small></p>\r\n                                    {/* <p class=\"card-text\"><small class=\"text-mutes\"><b>By:{users[movie.author]}</b> </small></p> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                    )))\r\n                }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default Allreviews;","C:\\xampp\\htdocs\\finalproject\\src\\redux\\store.js",[],"C:\\xampp\\htdocs\\finalproject\\src\\redux\\saga.js",[],"C:\\xampp\\htdocs\\finalproject\\src\\redux\\reducers\\rootReducer.js",["69"],"const initState = [];\r\n\r\nexport default (state=initState,action) => {\r\n    switch(action.type){\r\n        case \"GET_REVIEWS\":\r\n            return {...state};\r\n        case \"GET_REVIEWS_SUCCESS\":\r\n            return {...state, reviews: action.payload,reviewUpdated: -1,reviewDeleted: -1};\r\n        case \"ADD_USER\":\r\n            return {...state};\r\n        case \"ADD_USER_SUCCESS\":\r\n            return {...state, userAdded:action.payload};\r\n        case \"GET_USER\":\r\n            return {...state};\r\n        case \"GET_USER_SUCCESS\":\r\n            return {...state, user: action.payload};\r\n        case \"GET_LOGIN\":\r\n            return {...state};\r\n        case \"GET_LOGIN_SUCCESS\":\r\n            return {...state,userLoggedIn:true ,user: action.payload.data,token: action.payload.token};\r\n        case \"GET_LOGIN_FAILURE\":\r\n            return {...state,userLoggedIn:false};\r\n        case \"GET_AUTH\":\r\n            return {...state};\r\n        case \"GET_AUTH_SUCCESS\":\r\n            return {...state, userAuth: true};\r\n        case \"GET_AUTH_FAILURE\":\r\n            return {...state, userAuth: false};\r\n        case \"ADD_REVIEW\":\r\n            return {...state};\r\n        case \"ADD_REVIEW_SUCCESS\":\r\n            return {...state, reviewAdded:action.payload,userId:action.payload.author};\r\n        case \"UPDATE_REVIEW\":\r\n            return {...state};\r\n        case \"UPDATE_REVIEW_SUCCESS\":\r\n            return {...state, reviewUpdated:action.payload};\r\n        case \"DELETE_UPDATE_REVIEW_COUNT_SUCCESS\":\r\n            return {...state, reviewUpdated:action.payload};\r\n        case \"DELETE_REVIEW\":\r\n            return {...state};\r\n        case \"DELETE_REVIEW_SUCCESS\":\r\n            return {...state, reviewDeleted:action.payload};\r\n        default :\r\n            return {...state};\r\n    }\r\n}","C:\\xampp\\htdocs\\finalproject\\src\\redux\\actions.js",[],"C:\\xampp\\htdocs\\finalproject\\src\\components\\Register.js",["70"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport {addUserAction} from '../redux/actions';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nconst Register = () => {\r\n\r\n    const dispatch = useDispatch(); \r\n\r\n    const[username,setUsername] = useState('');\r\n    const[firstname,setFirstName] = useState('');\r\n    const[lastname,setLastName] = useState('');\r\n    const[email,setEmail] = useState('');\r\n    const[password,setPassword] = useState('');\r\n    const[bio,setBio] = useState('');\r\n    const[country,setCountry] = useState('');\r\n\r\n\r\n    function addData(){\r\n        let user = {username,firstname,lastname,email,password,country,bio};\r\n        dispatch((addUserAction(user)));\r\n    }\r\n\r\n    const userAdd = useSelector((state) => {\r\n                        if(state.userAdded){\r\n                            return state.userAdded;\r\n                        }\r\n                    })\r\n\r\n    console.log(userAdd);\r\n\r\n    if(userAdd){\r\n        return <Redirect to=\"/Login\" />\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form className=\"form-control\">\r\n                <label for=\"username\">USERNAME:</label>\r\n                <input onChange={(e) => {setUsername(e.target.value)}} type=\"text\" id=\"username\"></input>\r\n                <label for=\"first_name\">FIRST NAME:</label>\r\n                <input onChange={(e) => {setFirstName(e.target.value)}} type=\"text\" id=\"first_name\"></input>\r\n                <label for=\"last_name\">LAST NAME:</label>\r\n                <input onChange={(e) => {setLastName(e.target.value)}} type=\"text\" id=\"last_name\"></input>\r\n                <label for=\"bio\">BIO:</label>\r\n                <input onChange={(e) => {setBio(e.target.value)}} type=\"textarea\" id=\"bio\"></input>\r\n                <label for=\"country\">COUNTRY:</label>\r\n                <select id=\"country\" onChange={(e) =>{setCountry(e.target.value)}}>\r\n                    <option selected></option>\r\n                    <option value=\"Australia\">AUSTRALIA</option>\r\n                    <option value=\"India\">INDIA</option>\r\n                    <option value=\"Singapore\">SINGAPORE</option>\r\n                    <option value=\"Belgium\">BELGIUM</option>\r\n                </select>\r\n                <label for=\"email\">EMAIL:</label>\r\n                <input onChange={(e) => {setEmail(e.target.value)}} type=\"text\" id=\"email\"></input>\r\n                <label for=\"password\">PASSWORD:</label>\r\n                <input onChange={(e) => {setPassword(e.target.value)}} type=\"password\" id=\"password\"></input>\r\n                <button onClick={(e) => {e.preventDefault(); addData()}} type=\"submit\">CREATE USER</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n","C:\\xampp\\htdocs\\finalproject\\src\\components\\Login.js",["71"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport {getUserAction} from '../redux/actions';\r\nimport {getUserAuth} from '../redux/actions';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n\r\n    let userData = {};\r\n\r\n    const dispatch = useDispatch(); \r\n\r\n    const[email,setEmail] = useState('')\r\n    const[password,setPassword] = useState('')\r\n    // const[loggedinuser,setUser] = useState()\r\n\r\n\r\n    function getData(){\r\n        let user = {email,password};\r\n        dispatch((getUserAction(user)));\r\n    }\r\n\r\n    // useEffect(()=>{\r\n    //     console.log(userData);\r\n    //     if(userData.userAuth){\r\n    //        return <Redirect to=\"/Home\" />\r\n    //     }\r\n    // },[userData.userAuth]);\r\n\r\n    userData = useSelector((state)=> {\r\n                                        if(state.userLoggedIn !== undefined){\r\n                                            if(state.userAuth){\r\n                                                return {userData:state.user,userToken:state.token,userAuth:state.userAuth};\r\n                                            }\r\n                                            else{\r\n                                                return {userData:state.user,userToken:state.token};\r\n                                            }\r\n                                        }\r\n                                        else{\r\n                                            return false;\r\n                                        }\r\n                                    });\r\n    console.log(userData);\r\n\r\n    if(userData.userAuth){\r\n        return <Redirect to=\"/UserHome\" />\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form className=\"form-control\">\r\n                <label for=\"email\">EMAIL:</label>\r\n                <input onChange={(e) => {setEmail(e.target.value)}} type=\"text\" id=\"email\"></input>\r\n                <label for=\"password\">PASSWORD:</label>\r\n                <input onChange={(e) => {setPassword(e.target.value)}} type=\"password\" id=\"password\"></input>\r\n                <button onClick={(e) => {e.preventDefault(); getData()}} type=\"submit\">LOGIN USER</button>\r\n            </form>\r\n            {userData && (<button onClick={()=>dispatch(getUserAuth(userData.userToken))}>GET LOGIN STATUS</button>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","C:\\xampp\\htdocs\\finalproject\\src\\redux\\history.js",[],"C:\\xampp\\htdocs\\finalproject\\src\\components\\UserHome.js",["72","73","74","75","76","77"],"C:\\xampp\\htdocs\\finalproject\\src\\components\\CreateReview.js",["78","79","80"],"import { getUserReviews } from '../redux/actions';\r\nimport { addUserReview } from '../redux/actions';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport {loadState,saveState} from '../redux/localStorage';\r\n\r\nconst CreateReview = () => {\r\n    \r\n    const [moviename,setMovieName] = useState('');\r\n    const [review,setMovieReview] = useState('');\r\n    const [genre,setMovieGenre] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const createReview = (e) =>{\r\n\r\n        e.preventDefault();\r\n\r\n        let loggedInUser = -1;\r\n        if(loadState()){\r\n            loggedInUser = loadState();\r\n        }\r\n\r\n        let reviewData = {moviename,review,genre,author:loggedInUser.state};\r\n\r\n        if(reviewData.moviename !== \"\" || reviewData.genre !== \"\" || reviewData.review !== \"\")\r\n            dispatch(addUserReview(reviewData)); \r\n    }\r\n    let reviewAdded = useSelector((state) => {if(state.reviewAdded){\r\n                                                return state.reviewAdded;\r\n                                            }}\r\n                    );\r\n\r\n    if(reviewAdded){\r\n        if(reviewAdded.moviename === moviename){\r\n            return <Redirect to=\"/UserHome\" />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form className=\"form-control\">\r\n                    <label for=\"moviename\">MOVIE NAME:</label>\r\n                    <input id=\"moviename\" type=\"text\" onChange={(e) => setMovieName(e.target.value)}></input>\r\n                    <label for=\"review\">REVIEW</label>\r\n                    <input id=\"review\" type=\"textarea\" onChange={(e) => setMovieReview(e.target.value)}></input>\r\n                    <label for=\"genre\">GENRE</label>\r\n                    <select id=\"genre\" onChange={(e) => setMovieGenre(e.target.value)}>\r\n                        <option selected></option>\r\n                        <option value=\"SCI-FI\">SCI-FI</option>\r\n                        <option value=\"ROMEDY\">ROMEDY</option>\r\n                        <option value=\"THRILLER\">THRILLER</option>\r\n                    </select>\r\n                    <button type=\"submit\" onClick={(e) => createReview(e)}>SUBMIT</button>\r\n                </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateReview;","C:\\xampp\\htdocs\\finalproject\\src\\redux\\localStorage.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":9,"column":31,"nodeType":"87","messageId":"88","endLine":9,"endColumn":39},{"ruleId":"85","severity":1,"message":"89","line":3,"column":28,"nodeType":"87","messageId":"88","endLine":3,"endColumn":36},{"ruleId":"90","severity":1,"message":"91","line":53,"column":33,"nodeType":"92","endLine":53,"endColumn":85},{"ruleId":"93","severity":1,"message":"94","line":3,"column":1,"nodeType":"95","endLine":46,"endColumn":2},{"ruleId":"85","severity":1,"message":"96","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":26},{"ruleId":"85","severity":1,"message":"96","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":26},{"ruleId":"85","severity":1,"message":"97","line":7,"column":9,"nodeType":"87","messageId":"88","endLine":7,"endColumn":18},{"ruleId":"98","severity":1,"message":"99","line":30,"column":7,"nodeType":"100","endLine":30,"endColumn":17,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":46,"column":23,"nodeType":"104","messageId":"105","endLine":46,"endColumn":25},{"ruleId":"90","severity":1,"message":"91","line":95,"column":33,"nodeType":"92","endLine":95,"endColumn":85},{"ruleId":"102","severity":1,"message":"103","line":105,"column":50,"nodeType":"104","messageId":"105","endLine":105,"endColumn":52},{"ruleId":"106","severity":1,"message":"107","line":110,"column":127,"nodeType":"108","messageId":"109","endLine":110,"endColumn":128},{"ruleId":"85","severity":1,"message":"110","line":1,"column":10,"nodeType":"87","messageId":"88","endLine":1,"endColumn":24},{"ruleId":"85","severity":1,"message":"96","line":3,"column":17,"nodeType":"87","messageId":"88","endLine":3,"endColumn":26},{"ruleId":"85","severity":1,"message":"111","line":6,"column":19,"nodeType":"87","messageId":"88","endLine":6,"endColumn":28},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","'loadState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loggedInUser'. Either include it or remove the dependency array.","ArrayExpression",["114"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'getUserReviews' is defined but never used.","'saveState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},"Update the dependencies array to be: [dispatch, loggedInUser]",{"range":"117","text":"118"},[922,932],"[dispatch, loggedInUser]"]