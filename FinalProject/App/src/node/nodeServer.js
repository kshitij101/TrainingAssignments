const express = require('express');
const cors = require('cors');
const path = require('path');
const cookieParser = require("cookie-parser");
const session = require("express-session");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");
const { Sequelize, Model, DataTypes } = require('sequelize');

const jwtSecret = "KshitijJWT";

let app = express();

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cors({
        origin: ["http://localhost:3000"],
        methods: ["GET","POST","OPTIONS","DELETE","PUT"],
        credentials: true,
    })
);

app.use(cookieParser());

app.use(session({
    key:"userId",
    secret:"KshitijNarvekar16031999",
    resave:false,
    saveUninitialized:false,
    cookie:{
        express: 60 * 60
    },

}))

const verifyJWT = (req,res,next) =>{
    const token = req.headers["x-access-token"];
    
    if(!token){
        res.json({statusCode:200,auth: false,response:"USER DOESNT HAVE AUTH TOKEN"});
        res.end();
    }
    else{
        jwt.verify(token,jwtSecret,(err,decoded)=>{
            if(err){
                res.json({statusCode:200,auth: false,response:"USER NOT AUTHENTICATED"});
                res.end();
            }
            else{
                req.userId = decoded.id;
                next();
            }
        })
    }
}

const sequelize = new Sequelize("iwp", "root", "", {
    host: 'localhost',
    dialect: 'mysql',
    pool: {
        max: 5,
        min: 0,
        idle: 10000
    },
    define: {
        timestamps: false // supressing the TimeStamp generated by ORM
    }
});


const user = require(path.join(__dirname, './models/users'))(sequelize, Sequelize.DataTypes);
const reviews = require(path.join(__dirname, './models/reviews'))(sequelize, Sequelize.DataTypes);


app.get('/api/users', (req, resp) => {
    sequelize.sync({
            force: false
        })
        .then(() =>
            user.findAll()
        )
        .then((data) => {
            resp.json({ stausCode: 200, rowCount: data.length,response:data });
            resp.end();
        })
        .catch((error) => resp.send({ statusCode: 500, data: error }));
});

app.get('/api/reviews', (req, resp) => {
    sequelize.sync({
            force: false
        })
        .then(() =>
            reviews.findAll()
        )
        .then((data) => {
            resp.json({ stausCode: 200, rowCount: data.length,response:data });
            resp.end();
        })
        .catch((error) => resp.send({ statusCode: 500, data: error }));
});

app.get('/api/reviews/:id', (req, resp) => {
    let id = parseInt(req.params.id);
    sequelize.sync({
            force: false
        })
        .then(() =>
            reviews.findAll({where:{author:id}})
        )
        .then((data) => {
            resp.json({ stausCode: 200, rowCount: data.length,response:data });
            resp.end();
        })
        .catch((error) => resp.send({ statusCode: 500, data: error }));
});

app.post('/api/register', (req,resp)=>{
    let { username,firstname,lastname,email,password,bio,country } = req.body;
    sequelize.sync({
        force:false
    })
    .then(() => {
        user.create({
            username:username,
            email:email,
            password:password,
            first_name:firstname,
            last_name:lastname,
            country: country,
            bio: bio
        }).catch(error => {
            console.log(error);
        });
    })
    .then((data) => {
        resp.json({ stausCode: 200,response: req.body});
        resp.end();
    })
    .catch(error => {
        console.log(error);
    })
});

app.post('/api/review', (req,resp)=>{
    let {moviename,review,genre,author} = req.body;
    sequelize.sync({
        force:false
    })
    .then(() => {
    reviews.create({
            moviename:moviename,
            review:review,
            genre:genre,
            author:author
        }).catch(error => {
            console.log(error);
        });
    })
    .then((data) => {
        resp.json({ stausCode: 200,response: req.body});
        resp.end();
    })
    .catch(error => {
        console.log(error);
    })
});

app.post('/api/login', (req,resp)=>{
    let { email,password } = req.body;
    sequelize.sync({
        force:false
    })
    .then(() => {
        return user.findOne({where:{email,password}})
    })
    .then((data) => {     
        const userid = data.dataValues.id;
        console.log("logged in id",userid);
        const token = jwt.sign({userid},jwtSecret,{
            expiresIn: 3000,            
        });

        req.session.user = data;

        resp.json({ stausCode: 200,response:data,token:token});
        resp.end();
    })
    .catch(error => {
        console.log(error);
    })
    
});

app.get('/api/userAuth',verifyJWT,(req,resp)=>{
    resp.json({statusCode:200,response:"USER AUTHENTICATED",auth:true});
});

app.get('/api/login', (req, resp) => {
    if(req.session.user){
        resp.json({statusCode: 200,isLoggedIn:true,response:req.session.user});
        resp.end();
    }
    else{
        resp.json({statusCode:200,isLoggedIn:false});
        resp.end();
    }
});

// app.put('/api/review', (req,resp)=>{
//     let { id,reviewchng } = req.body;
//     sequelize.sync({
//         force:false
//     })
//     .then(() => {
//         reviews.update({review:reviewchng},{where:{id:parseInt(id)}})
//     })
//     .then((data) => {     
//         resp.json({ stausCode: 200,response:id});
//         resp.end();
//     })
//     .catch(error => {
//         console.log(error);
//     })
    
// });
app.put('/api/review', async (req,resp)=>{
    let { id,data } = req.body;
    console.log(id,data);
    try {
        const userReview = await reviews.findOne({where:{id:id}});

        userReview.review = data;

        await userReview.save();

        return resp.json({ statusCode: 200,response:id});
    }catch(err){
        console.log(err);
    }
    
});

app.delete('/api/review/:id', (req,resp)=>{
    let id = parseInt(req.params.id);
    console.log(id);
    sequelize.sync({
        force:false
    })
    .then(() => {
        reviews.destroy({
            where:{
                id:id
            }
        })
    })
    .then(() =>{
        resp.json({statusCode:200,response:id});
        resp.end();
    })
    .catch(error =>{
        console.log(error);
    })
});

app.listen(4200, () => {
    console.log('Express Server Started on port 4200');
});